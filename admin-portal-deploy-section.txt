  deploy-admin-portal:
    runs-on: ubuntu-latest
    needs: deploy-infra
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install azure-functions flask gunicorn
        
    - name: Azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    # Get admin portal info from Bicep deployment
    - name: Get admin portal information
      run: |
        # Get admin portal web app name from outputs
        ADMIN_PORTAL_NAME=$(az deployment group show \
          --resource-group "${{ env.RESOURCE_GROUP }}" \
          --name "github-${{ github.run_number }}" \
          --query "properties.outputs.adminPortalName.value" \
          --output tsv || echo "${{ env.ADMIN_PORTAL_NAME }}")
        
        echo "Using Admin Portal: $ADMIN_PORTAL_NAME"
        echo "ADMIN_PORTAL_NAME=$ADMIN_PORTAL_NAME" >> $GITHUB_ENV
        
        # Get admin portal hostname
        ADMIN_PORTAL_HOSTNAME=$(az deployment group show \
          --resource-group "${{ env.RESOURCE_GROUP }}" \
          --name "github-${{ github.run_number }}" \
          --query "properties.outputs.adminPortalHostName.value" \
          --output tsv || echo "")
          
        if [ -n "$ADMIN_PORTAL_HOSTNAME" ]; then
          echo "Admin Portal Hostname: $ADMIN_PORTAL_HOSTNAME"
          echo "ADMIN_PORTAL_HOSTNAME=$ADMIN_PORTAL_HOSTNAME" >> $GITHUB_ENV
        fi
          
    # Prepare admin portal deployment package
    - name: Prepare admin portal deployment package
      run: |
        echo "Preparing admin portal deployment package"
        mkdir -p admin-package
        
        # Copy admin portal files
        cp -r templates static admin-package/
        
        # Ensure data directory exists
        mkdir -p admin-package/data
        if [ -d data ]; then
          cp -r data/* admin-package/data/
        fi
        
        # Copy main application files
        cp main.py admin-package/
        cp wsgi.py admin-package/
        
        # Create web.config file
        cat > admin-package/web.config << EOF
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <system.webServer>
            <handlers>
              <add name="PythonHandler" path="*" verb="*" modules="FastCgiModule" 
                   scriptProcessor="D:\Program Files\Python\${{ env.PYTHON_VERSION }}\python.exe|D:\Program Files\Python\${{ env.PYTHON_VERSION }}\Lib\site-packages\wfastcgi.py" 
                   resourceType="Unspecified" requireAccess="Script" />
            </handlers>
            <fastCgi>
              <application fullPath="D:\Program Files\Python\${{ env.PYTHON_VERSION }}\python.exe" 
                           arguments="D:\Program Files\Python\${{ env.PYTHON_VERSION }}\Lib\site-packages\wfastcgi.py">
                <environmentVariables>
                  <environmentVariable name="PYTHONPATH" value="D:\home\site\wwwroot" />
                  <environmentVariable name="WSGI_HANDLER" value="wsgi.application" />
                </environmentVariables>
              </application>
            </fastCgi>
            <rewrite>
              <rules>
                <rule name="LowerCaseUrls" stopProcessing="true">
                  <match url="[A-Z]" ignoreCase="false" />
                  <action type="Redirect" url="{ToLower:{URL}}" />
                </rule>
              </rules>
            </rewrite>
            <httpErrors errorMode="DetailedLocalOnly" existingResponse="Auto">
              <clear />
              <error statusCode="404" path="404.html" responseMode="File" />
              <error statusCode="500" path="500.html" responseMode="File" />
            </httpErrors>
          </system.webServer>
          <appSettings>
            <add key="PYTHONPATH" value="D:\home\site\wwwroot" />
            <add key="WSGI_HANDLER" value="wsgi.application" />
            <add key="WSGI_LOG" value="D:\home\LogFiles\application.log" />
          </appSettings>
        </configuration>
        EOF
        
        # Create 404 and 500 error pages
        cat > admin-package/404.html << EOF
        <!DOCTYPE html>
        <html>
        <head>
            <title>404 - Page Not Found</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; text-align: center; }
                h1 { color: #0066cc; }
                .container { border: 1px solid #ddd; padding: 20px; border-radius: 5px; max-width: 600px; margin: 0 auto; }
            </style>
        </head>
        <body>
            <h1>404 - Page Not Found</h1>
            <div class="container">
                <p>The page you requested could not be found.</p>
                <p><a href="/">Return to Dashboard</a></p>
            </div>
        </body>
        </html>
        EOF
        
        cat > admin-package/500.html << EOF
        <!DOCTYPE html>
        <html>
        <head>
            <title>500 - Server Error</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; text-align: center; }
                h1 { color: #cc0000; }
                .container { border: 1px solid #ddd; padding: 20px; border-radius: 5px; max-width: 600px; margin: 0 auto; }
            </style>
        </head>
        <body>
            <h1>500 - Server Error</h1>
            <div class="container">
                <p>The server encountered an internal error and was unable to complete your request.</p>
                <p>Please try again later or contact the administrator.</p>
                <p><a href="/">Return to Dashboard</a></p>
            </div>
        </body>
        </html>
        EOF
        
        # Create requirements.txt
        cat > admin-package/requirements.txt << EOF
        flask==2.0.3
        gunicorn==20.1.0
        wfastcgi==3.0.0
        python-dotenv==0.21.1
        werkzeug==2.0.3
        azure-functions==1.15.0
        azure-identity==1.12.0
        azure-keyvault-secrets==4.6.0
        azure-storage-blob==12.16.0
        requests==2.29.0
        markdown==3.4.3
        pygments==2.15.1
        langdetect==1.0.9
        trafilatura==1.6.1
        azure-mgmt-storage==21.0.0
        azure-mgmt-resource==22.0.0
        Flask-SQLAlchemy==3.0.3
        sqlalchemy==2.0.12
        psycopg2-binary==2.9.6
        EOF
        
        # Create startup script
        cat > admin-package/startup.sh << EOF
        #!/bin/bash
        echo "Installing required packages..."
        python -m pip install --upgrade pip
        pip install gunicorn flask wfastcgi
        
        echo "Starting admin portal with gunicorn..."
        gunicorn --bind=0.0.0.0:5000 --timeout 600 wsgi:application
        EOF
        chmod +x admin-package/startup.sh
        
        # Ensure proper file permissions
        chmod -R 755 admin-package
        
        # List the contents of the admin package
        echo "Admin portal package contents:"
        ls -la admin-package
        
    # Get storage account info for blob deployment
    - name: Get storage account info
      run: |
        # Get storage account information from deployment
        STORAGE_ACCOUNT_NAME=$(az deployment group show \
          --resource-group "${{ env.RESOURCE_GROUP }}" \
          --name "github-${{ github.run_number }}" \
