name: Azure Deployment Pipeline

# This workflow handles deployment of all Azure resources, functions, and admin portal
# Clean implementation with dedicated admin portal web app

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_NAME: "blogauto-${{ vars.ENVIRONMENT || 'dev' }}-function"
  ADMIN_PORTAL_NAME: "blogauto-${{ vars.ENVIRONMENT || 'dev' }}-admin"
  PYTHON_VERSION: '3.11'
  RESOURCE_GROUP: "blogauto-${{ vars.ENVIRONMENT || 'dev' }}-rg"
  # Default location for production is westus due to quota availability
  # For other environments, use eastus
  LOCATION: ${{ vars.LOCATION || 'eastus' }}
  ENVIRONMENT: ${{ vars.ENVIRONMENT || 'dev' }}
  PROJECT_NAME: "blogauto"
  # Default WordPress admin settings
  WP_ADMIN_EMAIL: ${{ vars.WP_ADMIN_EMAIL || 'admin@example.com' }}

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest azure-functions
        # Install src requirements
        if [ -f src/requirements.txt ]; then
          pip install -r src/requirements.txt
        fi
        
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Test with pytest
      run: |
        pytest

  validate-bicep:
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Install Bicep CLI
      run: |
        curl -Lo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
        chmod +x ./bicep
        sudo mv ./bicep /usr/local/bin/bicep
        
    - name: Validate Bicep templates
      run: |
        bicep build infra/main.bicep
        bicep build infra/storage.bicep
        bicep build infra/functions.bicep
        bicep build infra/keyvault.bicep
        bicep build infra/keyvault-access-policies.bicep
        bicep build infra/monitoring.bicep
        bicep build infra/admin-portal.bicep
        bicep build infra/admin-portal-identity.bicep
        if [ -f infra/wordpress.bicep ]; then
          bicep build infra/wordpress.bicep
        fi

  deploy-infra:
    runs-on: ubuntu-latest
    needs: validate-bicep
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Setup deployment environment
      run: |
        # Define environment variables based on branch
        ENVIRONMENT=${{ github.ref_name == 'main' && 'prod' || 'dev' }}
        RESOURCE_GROUP="blogauto-${ENVIRONMENT}-rg"
        PROJECT_NAME="blogauto"
        LOCATION=${{ vars.LOCATION || 'eastus' }}
        WP_ADMIN_EMAIL=${{ vars.WP_ADMIN_EMAIL || 'admin@example.com' }}
        
        # Setup repository info
        REPO_URL="https://github.com/${{ github.repository }}.git"
        if [ -z "$REPO_URL" ] || [ "$REPO_URL" = "https://github.com/.git" ]; then
          echo "GitHub repository context unavailable, using fallback repository URL"
          REPO_URL="https://github.com/yourusername/blog-automation-platform.git"
        fi
        
        REPO_BRANCH="${{ github.ref_name }}"
        if [ -z "$REPO_BRANCH" ]; then
          echo "GitHub branch context unavailable, using fallback branch"
          REPO_BRANCH="main"
        fi
        
        echo "Environment: $ENVIRONMENT"
        echo "Resource Group: $RESOURCE_GROUP"
        echo "Location: $LOCATION"
        echo "Project Name: $PROJECT_NAME"
        echo "Repository URL: $REPO_URL"
        echo "Repository Branch: $REPO_BRANCH"
        
        echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
        echo "RESOURCE_GROUP=$RESOURCE_GROUP" >> $GITHUB_ENV
        echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV
        echo "LOCATION=$LOCATION" >> $GITHUB_ENV
        echo "WP_ADMIN_EMAIL=$WP_ADMIN_EMAIL" >> $GITHUB_ENV
        echo "REPO_URL=$REPO_URL" >> $GITHUB_ENV
        echo "REPO_BRANCH=$REPO_BRANCH" >> $GITHUB_ENV
        
    - name: Create resource group if not exists
      run: |
        az group create --name "$RESOURCE_GROUP" --location "$LOCATION"
        
    - name: Get GitHub service principal ID
      id: get-sp-id
      run: |
        # Extract the object ID of the GitHub service principal from the credentials
        CREDENTIAL_JSON='${{ secrets.AZURE_CREDENTIALS }}'
        OBJECT_ID=$(echo $CREDENTIAL_JSON | grep -o '"object_id":\s*"[^"]*"' | cut -d'"' -f4 || echo "")
        
        if [ -z "$OBJECT_ID" ]; then
          # Try to find it from client_id
          CLIENT_ID=$(echo $CREDENTIAL_JSON | grep -o '"clientId":\s*"[^"]*"' | cut -d'"' -f4)
          if [ -n "$CLIENT_ID" ]; then
            echo "Retrieving object ID from client ID..."
            OBJECT_ID=$(az ad sp show --id $CLIENT_ID --query "id" --output tsv 2>/dev/null || echo "")
          fi
        fi
        
        if [ -n "$OBJECT_ID" ]; then
          echo "Found service principal object ID: $OBJECT_ID"
          echo "DEPLOYMENT_PRINCIPAL_ID=$OBJECT_ID" >> $GITHUB_ENV
        else
          echo "⚠️ Could not determine service principal object ID. RBAC permissions for storage account may not be applied."
          echo "DEPLOYMENT_PRINCIPAL_ID=" >> $GITHUB_ENV
        fi
        
    - name: Deploy Azure infrastructure
      run: |
        # Deploy Azure infrastructure using Bicep template
        # Always deploy WordPress (deployWordPress=true) with secure passwords from secrets
        az deployment group create \
          --resource-group "$RESOURCE_GROUP" \
          --template-file ./infra/main.bicep \
          --parameters projectName="$PROJECT_NAME" \
          --parameters environment="$ENVIRONMENT" \
          --parameters location="$LOCATION" \
          --parameters deployWordPress=true \
          --parameters wpAdminEmail="$WP_ADMIN_EMAIL" \
          --parameters dbAdminPassword="${{ secrets.DB_ADMIN_PASSWORD || 'Wp@ssw0rd12345!' }}" \
          --parameters wpAdminPassword="${{ secrets.WP_ADMIN_PASSWORD || 'Wp@ssw0rd54321!' }}" \
          --parameters deploymentPrincipalId="$DEPLOYMENT_PRINCIPAL_ID" \
          --parameters repoUrl="$REPO_URL" \
          --parameters repoBranch="$REPO_BRANCH" \
          --parameters configureSourceControl=false \
          --name "github-${{ github.run_number }}"

  deploy-function:
    runs-on: ubuntu-latest
    needs: deploy-infra
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    # Get function app info from Bicep deployment
    - name: Get function app information
      run: |
        # Define resource group from workflow environment
        ENVIRONMENT=${{ github.ref_name == 'main' && 'prod' || 'dev' }}
        RESOURCE_GROUP="blogauto-${ENVIRONMENT}-rg"
        echo "Using Resource Group: $RESOURCE_GROUP" 
        echo "RESOURCE_GROUP=$RESOURCE_GROUP" >> $GITHUB_ENV
        
        # Get function app name from outputs
        FUNCTION_APP_NAME=$(az deployment group show \
          --resource-group "$RESOURCE_GROUP" \
          --name "github-${{ github.run_number }}" \
          --query "properties.outputs.functionAppName.value" \
          --output tsv || echo "blogauto-${ENVIRONMENT}-function")
        
        echo "Using Function App: $FUNCTION_APP_NAME"
        echo "FUNCTION_APP_NAME=$FUNCTION_APP_NAME" >> $GITHUB_ENV
        
    # Trigger Git deployment sync (in case it doesn't auto-sync)
    - name: Sync Git repository deployment
      run: |
        echo "Checking function app SCM type..."
        SCM_TYPE=$(az webapp config show \
          --resource-group "$RESOURCE_GROUP" \
          --name "$FUNCTION_APP_NAME" \
          --query "scmType" \
          --output tsv 2>/dev/null || echo "")
        
        if [ "$SCM_TYPE" == "ExternalGit" ]; then
          echo "Function app is already using ExternalGit for deployment. Triggering a sync..."
          az webapp deployment source sync \
            --resource-group "$RESOURCE_GROUP" \
            --name "$FUNCTION_APP_NAME"
        else
          echo "Function app may be using a different SCM type or none. Consider configuring Git deployment manually if needed."
        fi
        
        echo "Function app deployment steps completed. Function app should be accessible at: https://$FUNCTION_APP_NAME.azurewebsites.net/"
  deploy-admin-portal:
    runs-on: ubuntu-latest
    needs: deploy-infra
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    # Get admin portal info from Bicep deployment
    - name: Get admin portal information
      run: |
        # Define resource group from workflow environment
        ENVIRONMENT=${{ github.ref_name == 'main' && 'prod' || 'dev' }}
        RESOURCE_GROUP="blogauto-${ENVIRONMENT}-rg"
        echo "Using Resource Group: $RESOURCE_GROUP" 
        echo "RESOURCE_GROUP=$RESOURCE_GROUP" >> $GITHUB_ENV
        
        # Get admin portal web app name from outputs
        ADMIN_PORTAL_NAME=$(az deployment group show \
          --resource-group "$RESOURCE_GROUP" \
          --name "github-${{ github.run_number }}" \
          --query "properties.outputs.adminPortalName.value" \
          --output tsv || echo "blogauto-${ENVIRONMENT}-admin")
        
        echo "Using Admin Portal: $ADMIN_PORTAL_NAME"
        echo "ADMIN_PORTAL_NAME=$ADMIN_PORTAL_NAME" >> $GITHUB_ENV
        
    # Trigger Git deployment sync (in case it doesn't auto-sync)
    - name: Sync Git repository deployment
      run: |
        echo "Checking admin portal SCM type..."
        SCM_TYPE=$(az webapp config appsettings list \
          --resource-group "$RESOURCE_GROUP" \
          --name "$ADMIN_PORTAL_NAME" \
          --query "[?name=='SCM_TYPE'].value" \
          --output tsv 2>/dev/null || echo "")
        
        if [ "$SCM_TYPE" == "ExternalGit" ]; then
          echo "Admin portal is already using ExternalGit for deployment. Triggering a sync..."
          az webapp deployment source sync \
            --resource-group "$RESOURCE_GROUP" \
            --name "$ADMIN_PORTAL_NAME"
        else
          echo "Admin portal may be using a different SCM type or none. Consider configuring Git deployment manually if needed."
        fi
        
        echo "Admin portal deployment steps completed. Web app should be accessible at: https://$ADMIN_PORTAL_NAME.azurewebsites.net/"