name: Azure Deployment Pipeline

# This workflow handles deployment of all Azure resources and functions
# Consolidation of all separate workflows to reduce confusion

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_NAME: "blogauto-${{ vars.ENVIRONMENT || 'dev' }}-function"
  PYTHON_VERSION: '3.11'
  RESOURCE_GROUP: "blogauto-${{ vars.ENVIRONMENT || 'dev' }}-rg"
  # Default location for production is westus due to quota availability
  # For other environments, use eastus
  LOCATION: ${{ vars.ENVIRONMENT == 'prod' && 'westus' || vars.LOCATION || 'eastus' }}
  ENVIRONMENT: ${{ vars.ENVIRONMENT || 'dev' }}
  PROJECT_NAME: "blogauto"
  # Default WordPress admin settings
  WP_ADMIN_EMAIL: ${{ vars.WP_ADMIN_EMAIL || 'admin@example.com' }}

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest azure-functions
        # Install src requirements
        if [ -f src/requirements.txt ]; then
          pip install -r src/requirements.txt
        fi
        
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Test with pytest
      run: |
        pytest

  validate-bicep:
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Install Bicep CLI
      run: |
        curl -Lo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
        chmod +x ./bicep
        sudo mv ./bicep /usr/local/bin/bicep
        
    - name: Validate Bicep templates
      run: |
        bicep build infra/main.bicep
        bicep build infra/storage.bicep
        bicep build infra/functions.bicep
        bicep build infra/keyvault.bicep
        bicep build infra/monitoring.bicep
        if [ -f infra/wordpress.bicep ]; then
          bicep build infra/wordpress.bicep
        fi

  deploy-infra:
    runs-on: ubuntu-latest
    needs: validate-bicep
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Create resource group if not exists
      run: |
        az group create --name "${{ env.RESOURCE_GROUP }}" --location "${{ env.LOCATION }}"
        
    - name: Deploy Azure infrastructure
      run: |
        # Deploy Azure infrastructure using Bicep template
        # Always deploy WordPress (deployWordPress=true) with secure passwords from secrets
        az deployment group create \
          --resource-group "${{ env.RESOURCE_GROUP }}" \
          --template-file ./infra/main.bicep \
          --parameters projectName="${{ env.PROJECT_NAME }}" \
          --parameters environment="${{ env.ENVIRONMENT }}" \
          --parameters location="${{ env.LOCATION }}" \
          --parameters deployWordPress=true \
          --parameters wpAdminEmail="${{ env.WP_ADMIN_EMAIL }}" \
          --parameters dbAdminPassword="${{ secrets.DB_ADMIN_PASSWORD || 'Wp@ssw0rd12345!' }}" \
          --parameters wpAdminPassword="${{ secrets.WP_ADMIN_PASSWORD || 'Wp@ssw0rd54321!' }}" \
          --name "github-${{ github.run_number }}"

  deploy-function:
    runs-on: ubuntu-latest
    needs: deploy-infra
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f src/requirements.txt ]; then
          pip install -r src/requirements.txt
        fi
        pip install azure-functions
        
    - name: Azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Debug Environment
      run: |
        echo "Function App Name: ${{ env.AZURE_FUNCTIONAPP_NAME }}"
        echo "Python Version: ${{ env.PYTHON_VERSION }}"
        echo "Environment: ${{ env.ENVIRONMENT }}"
        echo "Resource Group: ${{ env.RESOURCE_GROUP }}"
      
    # First, prepare the web app deployment package including admin portal
    - name: Prepare web application deployment package
      run: |
        echo "Preparing web application deployment package"
        mkdir -p deploy-package
        # Copy function code
        cp -r src/* deploy-package/
        # Copy admin portal files
        cp -r templates static deploy-package/
        # Copy main application file
        cp main.py deploy-package/
        # Copy web.config and startup.sh for Azure App Service
        cp web.config deploy-package/
        chmod +x startup.sh
        cp startup.sh deploy-package/
        # Copy requirements file if it exists
        if [ -f requirements.txt ]; then
          cp requirements.txt deploy-package/
        fi
        # Create a simple wsgi.py if it doesn't exist
        if [ ! -f deploy-package/wsgi.py ]; then
          echo "from main import app as application" > deploy-package/wsgi.py
        fi
        # Create 'host.json' file to indicate this is also a function app
        echo '{"version":"2.0","extensionBundle":{"id":"Microsoft.Azure.Functions.ExtensionBundle","version":"[2.*, 3.0.0)"}}' > deploy-package/host.json
        # Create a '.deployment' file to control deployment behavior
        echo '[config]' > deploy-package/.deployment
        echo 'SCM_DO_BUILD_DURING_DEPLOYMENT=true' >> deploy-package/.deployment
        # List the contents of the deploy package
        ls -la deploy-package

    - name: Deploy Function App and Web App
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: deploy-package
        scm-do-build-during-deployment: true
        enable-oryx-build: true
        respect-pom-xml: false
        respect-funcignore: false
      env:
        AZURE_FUNCTIONAPP_PACKAGE_PATH: deploy-package
        PYTHON_VERSION: ${{ env.PYTHON_VERSION }}

    - name: Configure Admin Portal
      run: |
        echo "Running post-deployment configuration to properly set up admin portal..."
        chmod +x ./configure-admin-portal.sh
        
        # Run configuration script and continue even if it fails
        if ./configure-admin-portal.sh "${{ env.RESOURCE_GROUP }}" "${{ env.AZURE_FUNCTIONAPP_NAME }}"; then
          echo "Admin portal configuration completed successfully."
        else
          echo "Admin portal configuration had some warnings, but deployment will continue."
          echo "You may need to manually check the admin portal configuration."
        fi