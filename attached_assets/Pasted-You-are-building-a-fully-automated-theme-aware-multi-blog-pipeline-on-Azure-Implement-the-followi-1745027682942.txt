You are building a fully automated, theme‑aware, multi‑blog pipeline on Azure. Implement the following end‑to‑end in a Replit Python + Azure Functions environment, using Bicep for infrastructure and GitHub Actions for CI/CD. Explain the purpose of every file and satisfy all feature requirements.

Configuration files at the blog root: • topics.json – JSON array of focus topics for the blog’s content selector
• theme.json – free‑form description of the blog’s overall theme to provide context for AI prompts
• frequency.json – defines how many articles to generate per day (e.g. { "daily": 3 })
• ready.json – empty file that gates the entire pipeline; if missing, no runs occur
• bootstrap.json – empty file that triggers one‑time bootstrap tasks when created or recreated
• integrations/ – folder containing stub JSON files named openai.json, surferseo.json, godaddy.json, adsense.json, analytics.json; each stub includes setup instructions and is populated during bootstrapping

Generated run artifacts go under: generated/{YYYYMMDD_HHmmss_GUID}/ research.json – trends and related‑topics data produced by PyTrends
content.md – SEO‑optimized markdown article generated by LLM + SurferSEO
recommendations.json – list of new topic suggestions based on trends
results.json – summary of operations, metrics and any errors for that run

Bootstrap outputs at the root: • DomainNames.json – array of 10 available .com domain suggestions under $50, generated by GoDaddy API
• bootstrap.done.json – contains errors and metrics from the bootstrap phase, created only when both DomainNames.json and integrations/ stubs exist

Folder structure: <blog-root>/ topics.json theme.json frequency.json ready.json bootstrap.json integrations/ openai.json surferseo.json godaddy.json adsense.json analytics.json generated/ 20250419_080000_ab12cd34/ research.json content.md recommendations.json results.json DomainNames.json bootstrap.done.json

Pipeline components and triggers:

1. CreateRunFolder (Timer trigger every 24h ÷ frequency.daily):

Idempotently create blob “generated/{runId}/.run” only if it doesn’t exist



2. ResearchTopic (Blob trigger on .run):

Load topics.json and theme.json

Query PyTrends with exponential back‑off retry (3 attempts, backoff_factor=0.2)

Write research.json, skip if already present



3. ContentGenerator (Blob trigger on research.json):

Load research data

Use GPT‑3.5 for draft, GPT‑4 Turbo for final polish (Azure OpenAI via Managed Identity)

Call SurferSEO API, validate optimizedContent, fallback to draft on failure

Write content.md and recommendations.json idempotently



4. Publisher (Blob trigger on content.md):

Read markdown, append AdSense snippet from Key Vault secret

POST to WordPress REST API using HTTPS and a “posts”‑scoped application password

Retry up to 3 times on HTTP 5xx, skip if post already exists



5. ResultsLogger (HTTP trigger):

Accept JSON payload from other functions or manual calls

Write results.json idempotently




Bootstrap tools (triggered on bootstrap.json + topics.json & theme.json upload): • DomainNameSelector: use GoDaddy API to suggest 10 domains under $50, write DomainNames.json only if missing
• IntegrationStubGenerator: generate or update integrations/*.json stubs with setup instructions, idempotent

Cross‑cutting best practices: • host.json global retry policy: fixedDelay, 3 retries, 5s interval
• Idempotency checks via BlobClient.exists() before writes
• All secrets (OpenAI, SurferSEO, GoDaddy, AdSense, GA4) stored in Azure Key Vault and accessed via Managed Identity
• Storage account configured for Cool tier, lifecycle rule to delete generated/* blobs older than 30 days
• Application Insights adaptive sampling enabled; emit custom metrics (contentWordCount, apiLatencyMs) and set alerts on exception rate >5% and latency >2s
• GitHub Actions workflow: lint, pytest with Azure Functions Test SDK, Bicep validation, deploy via azure/functions-action
• PyTrends and HTTP calls use requests with Retry adapter to handle 429/5xx codes
• WordPress integration locked down to HTTPS, outbound IP whitelisting, minimal privileges

Deliver code files for each function with function.json and init.py, a host.json with retry settings, a Bicep file for infrastructure, and a GitHub Actions YAML for CI/CD.

