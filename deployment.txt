DEPLOYMENT NOTES
April 20, 2025

OVERVIEW
This document provides detailed information about the deployment of the blog automation infrastructure to Azure. The deployment process has been streamlined and consolidated from multiple scripts into a single script that handles all resources.

DEPLOYMENT SCRIPT OPTIONS
The consolidated deployment script (deploy-consolidated.py) supports two deployment methods:
1. Using Azure CLI (default method)
2. Using Azure SDK (for CI/CD scenarios)

COMMAND LINE PARAMETERS
--resource-group, -g  (Required) Name of the Azure resource group
--location, -l        Azure region location (default: eastus, recommend westus for prod)
--environment, -e     Environment name for resources (default: dev)
--project-name, -p    Project name for resource naming (default: blogauto)
--use-azure-sdk       Use Azure SDK instead of CLI (useful for CI/CD)
--verbose, -v         Enable verbose logging

RESOURCE NAMING CONVENTIONS
All resources follow a consistent naming convention:
{project-name}-{environment}-{resource-type}

Examples:
- blogauto-dev-storage (storage account, converted to lowercase with no hyphens)
- blogauto-dev-function (function app)
- blogauto-dev-plan (app service plan)
- blogauto-dev-insights (application insights)
- blogauto-dev-vault (key vault)

REGION CONSIDERATIONS
For production environments, westus is recommended over eastus due to quota availability.
The script will automatically use westus for production deployments if location is set to eastus.

SKU CONSIDERATIONS
All environments now use B1 SKU for consistency and to avoid quota limitations.
Storage accounts use Standard_LRS for dev/test and Standard_GRS for production.

WORDPRESS DEPLOYMENT (OPTIONAL)
WordPress can be deployed as part of the infrastructure by specifying --deploy-wordpress.
WordPress credentials can be provided as parameters or will be generated automatically.
WordPress Multisite is enabled by default with domain mapping capabilities.

GITHUB ACTIONS INTEGRATION
The deployment can be triggered from GitHub Actions using the consolidated workflow file.
Required secrets for GitHub Actions:
- AZURE_CREDENTIALS: JSON containing Service Principal credentials

COMMON DEPLOYMENT ERRORS AND FIXES
1. "Duplicate command" error in GitHub Actions
   - Issue: The `az deployment group create` command appears twice
   - Fix: Remove the duplicate line and format parameters with one per line

2. Bicep syntax errors with complex expressions
   - Issue: Nested ternary operators and complex conditionals cause validation failures
   - Fix: Simplified tier determination with hardcoded values matching the default parameters

3. "DeploymentNotFound" error
   - Issue: This can occur when there's a syntax error in the workflow command
   - Fix: Ensure proper formatting of multi-line commands in YAML

4. Storage account naming errors
   - Issue: Azure requires lowercase alphanumeric storage account names
   - Fix: Use toLower() function on storage account names and remove hyphens

KEY VAULT CONFIGURATION
The deployment creates a Key Vault to store sensitive information:
- WordPress credentials
- Database connection strings
- API keys for external services

IMPORTANT NOTES
1. The deployment process can take 15-20 minutes to complete
2. WordPress deployment adds an additional 10-15 minutes
3. Default SKUs are chosen to work within Azure free tier limits where possible
4. Function app uses Python 3.11 runtime
5. Storage account names are automatically converted to lowercase to ensure validity

RECENT CHANGES (April 20, 2025)
- Fixed GitHub Actions workflow to avoid duplicate command execution
- Simplified SKU tier determination in Bicep templates by using a hardcoded tier
- Removed complex nested ternary expressions that were causing syntax errors
- Reformatted parameters in deployment commands for better readability
- Enhanced security by removing storage key exposure from output properties
- Updated region configuration to use westus instead of eastus to address quota limitations
- Added clearer error descriptions and troubleshooting steps to documentation

TESTING DEPLOYED RESOURCES
After deployment completes, verify the following:
1. Function app is accessible and responding to requests
2. Storage account has the expected containers created
3. Key Vault contains the necessary secrets
4. WordPress site is accessible (if deployed)