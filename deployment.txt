DEPLOYMENT NOTES
April 20, 2025 - v2.0

OVERVIEW
This document provides detailed information about the deployment of the blog automation infrastructure to Azure. The deployment process has been streamlined and consolidated from multiple scripts into a single script that handles all resources.

===================================================================================
DEPLOYMENT METHODS
===================================================================================

DEPLOYMENT SCRIPT OPTIONS
The consolidated deployment script (deploy-consolidated.py) supports two deployment methods:
1. Using Azure CLI (default method)
2. Using Azure SDK (for CI/CD scenarios)

COMMAND LINE PARAMETERS
--resource-group, -g  (Required) Name of the Azure resource group
--location, -l        Azure region location (default: eastus, recommend westus for prod)
--environment, -e     Environment name for resources (default: dev)
--project-name, -p    Project name for resource naming (default: blogauto)
--use-azure-sdk       Use Azure SDK instead of CLI (useful for CI/CD)
--verbose, -v         Enable verbose logging
--deploy-wordpress    Flag to deploy WordPress with multisite capabilities

EXAMPLES
# Deploy to dev environment in eastus
python deploy-consolidated.py --resource-group blogauto-dev-rg --environment dev

# Deploy to production environment in westus
python deploy-consolidated.py --resource-group blogauto-prod-rg --environment prod --location westus

# Deploy with WordPress Multisite in production
python deploy-consolidated.py --resource-group blogauto-prod-rg --environment prod --location westus --deploy-wordpress

===================================================================================
RESOURCE DETAILS
===================================================================================

RESOURCE NAMING CONVENTIONS
All resources follow a consistent naming convention:
{project-name}-{environment}-{resource-type}

Examples:
- blogauto-dev-storage (storage account, converted to lowercase with no hyphens)
- blogauto-dev-function (function app)
- blogauto-dev-plan (app service plan)
- blogauto-dev-insights (application insights)
- blogauto-dev-vault (key vault)

REGION CONSIDERATIONS
For production environments, westus is recommended over eastus due to quota availability.
The script will automatically use westus for production deployments if location is set to eastus.

SKU CONSIDERATIONS
All environments now use B1 SKU for consistency and to avoid quota limitations.
Storage accounts use Standard_LRS for dev/test and Standard_GRS for production.

WORDPRESS DEPLOYMENT (OPTIONAL)
WordPress can be deployed as part of the infrastructure by specifying --deploy-wordpress.
WordPress credentials can be provided as parameters or will be generated automatically.
WordPress Multisite is enabled by default with domain mapping capabilities.

===================================================================================
GITHUB ACTIONS INTEGRATION
===================================================================================

The deployment can be triggered from GitHub Actions using the consolidated workflow file.

Required secrets for GitHub Actions:
- AZURE_CREDENTIALS: JSON containing Service Principal credentials
  Format:
  {
    "clientId": "<client-id>",
    "clientSecret": "<client-secret>",
    "subscriptionId": "<subscription-id>",
    "tenantId": "<tenant-id>"
  }

Workflow variables (set in repository settings):
- ENVIRONMENT: Environment name (dev, test, prod)
- LOCATION: Azure region (westus recommended for production)

WORKFLOW JOBS
The consolidated workflow contains the following jobs:
1. lint-and-test: Run code linting and tests
2. validate-bicep: Validate Bicep templates
3. deploy-infra: Deploy Azure infrastructure
4. deploy-function: Deploy function app code

EXAMPLE WORKFLOW INVOCATION
To manually trigger the workflow:
1. Go to Actions tab in the repository
2. Select "Azure Deployment Pipeline"
3. Click "Run workflow"
4. Select the branch and provide any input parameters
5. Click "Run workflow" button

===================================================================================
COMMON DEPLOYMENT ERRORS AND FIXES
===================================================================================

1. "Duplicate command" error in GitHub Actions
   - Issue: The `az deployment group create` command appears twice in the workflow file
   - Symptoms: Error message about duplicate command or syntax error in workflow
   - Fix: Remove the duplicate line and format parameters with one per line
   - Example corrected format:
     ```yaml
     az deployment group create \
       --resource-group "${{ env.RESOURCE_GROUP }}" \
       --template-file ./infra/main.bicep \
       --parameters projectName="${{ env.PROJECT_NAME }}" \
       --parameters environment="${{ env.ENVIRONMENT }}" \
       --parameters location="${{ env.LOCATION }}" \
       --name "github-${{ github.run_number }}"
     ```

2. Bicep syntax errors with complex expressions
   - Issue: Nested ternary operators and complex conditionals cause validation failures
   - Symptoms: Errors like "BCP009: Expected a literal value..."
   - Fix: Simplified tier determination with hardcoded values matching the default parameters
   - Example fix:
     ```bicep
     // Instead of complex ternary expressions
     var tier = 'Basic'  // Hardcoded to match the default B1 SKU
     ```

3. "DeploymentNotFound" error
   - Issue: This can occur when there's a syntax error in the workflow command
   - Symptoms: Error message "Deployment 'github-X' could not be found"
   - Fix: Ensure proper formatting of multi-line commands in YAML
   - Check for duplicate commands, extra spaces, or missing backslashes

4. Storage account naming errors
   - Issue: Azure requires lowercase alphanumeric storage account names
   - Symptoms: "StorageAccountNameInvalid" error during deployment
   - Fix: Use toLower() function on storage account names and remove hyphens
   - Example:
     ```bicep
     var storageName = toLower(replace('${namePrefix}storage', '-', ''))
     ```

5. Resource quota limitations
   - Issue: Azure subscription limits may prevent deployment of certain SKUs
   - Symptoms: "QuotaExceeded" error during deployment
   - Fix: Use smaller SKUs or different regions with better quota availability
   - Changed default region from eastus to westus for production deployments

===================================================================================
KEY VAULT CONFIGURATION
===================================================================================

The deployment creates a Key Vault to store sensitive information:
- WordPress credentials
- Database connection strings
- API keys for external services

STORED SECRETS
- WordPressUrl: URL of the WordPress site
- WordPressAdminUsername: WordPress admin username
- WordPressAppPassword: Application password for API access
- WordPressDbCredentials: JSON object with database connection details
- WordPressIsMultisite: Boolean flag indicating if multisite is enabled
- WordPressNetworkId: ID of the main network in multisite setup
- WordPressMultisiteConfig: JSON object with multisite configuration

ACCESS POLICIES
- Function App: Granted GET permissions for secrets
- Deployment Script: Granted GET, SET permissions during deployment

===================================================================================
DEPLOYMENT TIMELINE
===================================================================================

IMPORTANT NOTES
1. The deployment process can take 15-20 minutes to complete
2. WordPress deployment adds an additional 10-15 minutes
3. Default SKUs are chosen to work within Azure free tier limits where possible
4. Function app uses Python 3.11 runtime
5. Storage account names are automatically converted to lowercase to ensure validity

Deployment Sequence:
1. Resource Group creation (1-2 minutes)
2. Storage Account deployment (2-3 minutes)
3. Key Vault deployment (2-3 minutes)
4. Application Insights deployment (1-2 minutes)
5. Function App deployment (3-5 minutes)
6. WordPress deployment (if enabled) (10-15 minutes)
7. WordPress plugin installation and configuration (5-7 minutes)

===================================================================================
RECENT CHANGES (April 20, 2025)
===================================================================================

BICEP TEMPLATE IMPROVEMENTS
- Fixed GitHub Actions workflow to avoid duplicate command execution
- Simplified SKU tier determination in Bicep templates by using a hardcoded tier
- Removed complex nested ternary expressions that were causing syntax errors
- Enhanced security by removing storage key exposure from output properties

DEPLOYMENT PROCESS IMPROVEMENTS
- Reformatted parameters in deployment commands for better readability
- Updated region configuration to use westus instead of eastus to address quota limitations
- Added better error handling in deployment scripts
- Improved parameter validation in consolidated deployment script

DOCUMENTATION IMPROVEMENTS
- Added comprehensive error troubleshooting guide
- Enhanced deployment examples and instructions
- Added detailed description of GitHub workflow structure
- Included command-line examples for common deployment scenarios

===================================================================================
TESTING DEPLOYED RESOURCES
===================================================================================

After deployment completes, verify the following:

1. Function app is accessible and responding to requests
   - Test URL: https://{functionAppName}.azurewebsites.net/api/health
   - Expected response: Status 200 OK with uptime information

2. Storage account has the expected containers created
   - Check for 'blog-data' and 'generated' containers
   - Verify lifecycle management policy is applied

3. Key Vault contains the necessary secrets
   - Verify all WordPress-related secrets are present (if WordPress was deployed)
   - Test Function App's ability to retrieve secrets

4. WordPress site is accessible (if deployed)
   - Test URL: https://{wordPressSiteName}.azurewebsites.net
   - Verify admin login works with provided credentials
   - Test multisite functionality by creating a new site